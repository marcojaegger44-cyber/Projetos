#!/usr/bin/env python3
"""
üé® DEMONSTRA√á√ÉO VISUAL - SISTEMA CM PREMIUM

Este arquivo demonstra como o c√≥digo ficar√° bonito com as extens√µes visuais:
- Sintaxe colorida profissional
- TODOs e coment√°rios destacados
- Par√™nteses coloridos por n√≠veis
- Indenta√ß√£o com cores do arco-√≠ris
- √çcones bonitos para arquivos
"""

import tkinter as tk
from pathlib import Path
import json
from datetime import datetime

# TODO: Implementar valida√ß√£o de dados
# FIXME: Corrigir bug na formata√ß√£o de valores
# NOTE: Usar este padr√£o para todos os m√≥dulos

class VisualDemo:
    """
    üé® Classe de demonstra√ß√£o visual
    
    Esta classe mostra como o c√≥digo Python fica mais bonito e leg√≠vel
    com as configura√ß√µes visuais aplicadas no VS Code.
    """
    
    def __init__(self, tema='premium'):
        # ? Coment√°rio de pergunta - azul
        # ! Coment√°rio de alerta - vermelho  
        # * Coment√°rio de destaque - verde
        # TODO: Adicionar mais temas
        
        self.tema = tema
        self.cores = {
            'primary': '#3498DB',      # üîµ Azul principal
            'secondary': '#2C3E50',    # üîò Azul escuro
            'success': '#27AE60',      # üü¢ Verde sucesso
            'warning': '#F39C12',      # üü° Laranja aviso
            'danger': '#E74C3C',       # üî¥ Vermelho perigo
        }
        
    def processar_dados(self, dados):
        """
        üîÑ Processa dados com diferentes tipos
        
        Args:
            dados: Lista de dados para processar
        
        Returns:
            dict: Dados processados com estat√≠sticas
        """
        if not dados:  # Verifica√ß√£o simples
            return {"erro": "Dados vazios"}
        
        # Processamento com m√∫ltiplos n√≠veis de par√™nteses (coloridos!)
        resultado = {
            'total': len(dados),
            'processados': len([
                item for item in dados 
                if (
                    isinstance(item, dict) and 
                    'valor' in item and 
                    (item['valor'] > 0)
                )
            ]),
            'timestamp': datetime.now().isoformat()
        }
        
        return resultado
    
    def aplicar_tema_visual(self, widget):
        """üé® Aplica tema visual a um widget Tkinter"""
        
        # Diferentes tipos de dados para mostrar cores
        configuracao = {
            "background": self.cores['primary'],    # String
            "foreground": "#FFFFFF",                # String hex
            "font": ("Segoe UI", 12, "bold"),      # Tuple
            "padding": 10,                          # N√∫mero inteiro
            "opacity": 0.95,                       # N√∫mero float
            "active": True,                        # Boolean
            "items": [1, 2, 3, 4, 5],             # Lista
        }
        
        # Aplicar configura√ß√µes com diferentes estruturas
        for propriedade, valor in configuracao.items():
            if hasattr(widget, 'configure'):
                try:
                    widget.configure({propriedade: valor})
                except Exception as e:
                    print(f"‚ùå Erro ao configurar {propriedade}: {e}")
                    # FIXME: Melhorar tratamento de erro
    
    def exemplo_formatacao_complexa(self):
        """
        üíé Exemplo de c√≥digo com formata√ß√£o complexa
        
        Mostra como diferentes constru√ß√µes Python ficam coloridas:
        - Comprehensions aninhadas
        - M√∫ltiplos n√≠veis de par√™nteses  
        - Diferentes tipos de coment√°rios
        - Strings formatadas
        """
        
        # * Comprehension complexa com m√∫ltiplos n√≠veis
        matriz_processada = [
            [
                f"Item_{i}_{j}" if (i % 2 == 0 and j % 2 == 0) 
                else f"Alt_{i}_{j}"
                for j in range(5)
                if (j > 0)  # ! Condi√ß√£o importante
            ]
            for i in range(3)
            if (i < 10)  # ? Limite necess√°rio?
        ]
        
        # TODO: Otimizar esta fun√ß√£o
        dados_aninhados = {
            'usuarios': [
                {
                    'id': i,
                    'nome': f'Usuario_{i}',
                    'ativo': (i % 2 == 0),
                    'configuracoes': {
                        'tema': 'dark' if (i % 3 == 0) else 'light',
                        'permissoes': [
                            'read', 'write', 'admin'
                        ][:(i % 3) + 1]
                    }
                }
                for i in range(1, 6)
            ],
            'meta': {
                'total': 5,
                'criado_em': datetime.now(),
                'versao': '2.0.0'
            }
        }
        
        return {
            'matriz': matriz_processada,
            'dados': dados_aninhados,
            'status': '‚úÖ Processamento conclu√≠do'
        }

def main():
    """
    üöÄ Fun√ß√£o principal de demonstra√ß√£o
    
    Execute este arquivo no VS Code para ver:
    - C√≥digo Python com cores profissionais
    - TODOs destacados em laranja
    - Coment√°rios categorizados por cores
    - Par√™nteses coloridos por n√≠veis
    - Indenta√ß√£o com arco-√≠ris lateral
    """
    
    print("üé® DEMONSTRA√á√ÉO VISUAL ATIVA")
    print("=" * 50)
    
    # Criar inst√¢ncia da demo
    demo = VisualDemo(tema='premium')
    
    # Dados de exemplo
    dados_teste = [
        {'valor': 100, 'nome': 'Item 1'},
        {'valor': 200, 'nome': 'Item 2'},
        {'valor': -50, 'nome': 'Item 3'},  # Valor negativo
        {'nome': 'Item 4'},  # Sem valor
    ]
    
    # Processar dados
    resultado = demo.processar_dados(dados_teste)
    print(f"üìä Resultado: {resultado}")
    
    # Exemplo complexo
    complexo = demo.exemplo_formatacao_complexa()
    print(f"üíé Dados complexos processados: {len(complexo)} itens")
    
    print("\nüéØ OBSERVE NO VS CODE:")
    print("‚Ä¢ Sintaxe colorida profissionalmente")
    print("‚Ä¢ TODOs, FIXMEs, NOTEs destacados")
    print("‚Ä¢ Par√™nteses coloridos por n√≠veis")
    print("‚Ä¢ Strings e n√∫meros com cores espec√≠ficas")
    print("‚Ä¢ Coment√°rios categorizados por s√≠mbolos")
    print("‚Ä¢ Indenta√ß√£o lateral colorida")
    
    print("\n‚ú® VISUAL PREMIUM ATIVO!")

if __name__ == "__main__":
    # ! Execute no VS Code para ver o resultado visual completo
    main()
