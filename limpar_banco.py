#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para limpar o banco de dados do sistema
Mant√©m apenas as estruturas das tabelas e dados essenciais
"""

import sqlite3
from pathlib import Path
import sys
import os

# Adicionar o diret√≥rio src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from db import get_connection, init_db

def limpar_banco_dados():
    """Limpa o banco de dados mantendo apenas estruturas e dados essenciais"""
    
    print("Iniciando limpeza do banco de dados...")
    
    try:
        # Conectar ao banco
        conn = get_connection()
        cur = conn.cursor()
        
        # Lista de tabelas para limpar (dados, mas mant√©m estrutura)
        tabelas_para_limpar = [
            'lancamento_receita',
            'lancamento_despesa', 
            'contrato_curso',
            'parcela_contrato',
            'cashback_cliente',
            'historico_transacoes',
            'venda_curso',
            'parcela_curso',
            'venda_imovel',
            'imovel_vendido',
            'receita_diversa',
            'despesa_diversa',
            'receita',
            'despesa',
            'auditoria'
        ]
        
        # Limpar dados das tabelas
        for tabela in tabelas_para_limpar:
            try:
                cur.execute(f"DELETE FROM {tabela}")
                print(f"Dados da tabela '{tabela}' removidos")
            except Exception as e:
                print(f"Aviso: N√£o foi poss√≠vel limpar '{tabela}': {e}")
        
        # Manter apenas usu√°rio admin
        cur.execute("DELETE FROM usuario WHERE username != 'admin'")
        print("‚úÖ Usu√°rios removidos (exceto admin)")
        
        # Manter apenas loja padr√£o
        cur.execute("DELETE FROM loja WHERE nome != 'Loja Principal'")
        print("‚úÖ Lojas removidas (exceto Loja Principal)")
        
        # Manter apenas cliente admin
        cur.execute("DELETE FROM cliente WHERE nome != 'admin'")
        print("‚úÖ Clientes removidos (exceto admin)")
        
        # Manter apenas curso padr√£o
        cur.execute("DELETE FROM curso WHERE nome != 'Curso Padr√£o'")
        print("‚úÖ Cursos removidos (exceto Curso Padr√£o)")
        
        # Manter apenas im√≥vel padr√£o
        cur.execute("DELETE FROM imovel WHERE descricao != 'Im√≥vel Padr√£o'")
        print("‚úÖ Im√≥veis removidos (exceto Im√≥vel Padr√£o)")
        
        # Limpar tipos de receita e despesa
        cur.execute("DELETE FROM tipo_receita")
        cur.execute("DELETE FROM tipo_despesa")
        print("‚úÖ Tipos de receita e despesa removidos")
        
        # Inserir dados essenciais se n√£o existirem
        inserir_dados_essenciais(cur)
        
        # Commit das altera√ß√µes
        conn.commit()
        print("‚úÖ Altera√ß√µes salvas no banco")
        
        # Verificar integridade
        verificar_integridade(cur)
        
        conn.close()
        print("üéØ Limpeza do banco conclu√≠da com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro durante a limpeza: {e}")
        return False
    
    return True

def inserir_dados_essenciais(cur):
    """Insere dados essenciais para o funcionamento do sistema"""
    
    print("üìù Inserindo dados essenciais...")
    
    # Verificar e inserir loja principal
    cur.execute("SELECT COUNT(*) FROM loja WHERE nome = 'Loja Principal'")
    if cur.fetchone()[0] == 0:
        cur.execute("""
            INSERT INTO loja (nome, tipo, cidade, uf, responsavel, ativo) 
            VALUES ('Loja Principal', 'Mista', 'S√£o Paulo', 'SP', 'Administrador', 1)
        """)
        print("‚úÖ Loja Principal criada")
    
    # Verificar e inserir cliente admin
    cur.execute("SELECT COUNT(*) FROM cliente WHERE nome = 'admin'")
    if cur.fetchone()[0] == 0:
        cur.execute("""
            INSERT INTO cliente (nome, telefone, email, documento) 
            VALUES ('admin', '11999999999', 'admin@sistema.com', '000.000.000-00')
        """)
        print("‚úÖ Cliente admin criado")
    
    # Verificar e inserir curso padr√£o
    cur.execute("SELECT COUNT(*) FROM curso WHERE nome = 'Curso Padr√£o'")
    if cur.fetchone()[0] == 0:
        cur.execute("""
            INSERT INTO curso (nome, valor_base, cashback_pct, ativo) 
            VALUES ('Curso Padr√£o', 1000.00, 5.0, 1)
        """)
        print("‚úÖ Curso Padr√£o criado")
    
    # Verificar e inserir im√≥vel padr√£o
    cur.execute("SELECT COUNT(*) FROM imovel WHERE descricao = 'Im√≥vel Padr√£o'")
    if cur.fetchone()[0] == 0:
        cur.execute("""
            INSERT INTO imovel (descricao, valor, localizacao) 
            VALUES ('Im√≥vel Padr√£o', 500000.00, 'S√£o Paulo - SP')
        """)
        print("‚úÖ Im√≥vel Padr√£o criado")
    
    # Inserir tipos de receita padr√£o
    tipos_receita = [
        ('Vendas de Cursos', 'Receitas provenientes de vendas de cursos'),
        ('Comiss√µes de Im√≥veis', 'Comiss√µes recebidas de vendas de im√≥veis'),
        ('Receitas Diversas', 'Outras receitas do neg√≥cio')
    ]
    
    for nome, descricao in tipos_receita:
        cur.execute("INSERT OR IGNORE INTO tipo_receita (nome, descricao) VALUES (?, ?)", 
                   (nome, descricao))
    
    print("‚úÖ Tipos de receita inseridos")
    
    # Inserir tipos de despesa padr√£o
    tipos_despesa = [
        ('Despesas Operacionais', 'Despesas gerais de opera√ß√£o'),
        ('Marketing', 'Gastos com marketing e publicidade'),
        ('Infraestrutura', 'Gastos com infraestrutura e equipamentos'),
        ('Despesas Diversas', 'Outras despesas do neg√≥cio')
    ]
    
    for nome, descricao in tipos_despesa:
        cur.execute("INSERT OR IGNORE INTO tipo_despesa (nome, descricao) VALUES (?, ?)", 
                   (nome, descricao))
    
    print("‚úÖ Tipos de despesa inseridos")

def verificar_integridade(cur):
    """Verifica a integridade do banco ap√≥s a limpeza"""
    
    print("üîç Verificando integridade do banco...")
    
    # Verificar tabelas principais
    tabelas_principais = ['usuario', 'loja', 'cliente', 'curso', 'imovel']
    
    for tabela in tabelas_principais:
        cur.execute(f"SELECT COUNT(*) FROM {tabela}")
        count = cur.fetchone()[0]
        print(f"üìä {tabela}: {count} registros")
    
    # Verificar tabelas de lan√ßamentos (devem estar vazias)
    tabelas_lancamentos = ['lancamento_receita', 'lancamento_despesa', 'contrato_curso']
    
    for tabela in tabelas_lancamentos:
        cur.execute(f"SELECT COUNT(*) FROM {tabela}")
        count = cur.fetchone()[0]
        if count == 0:
            print(f"‚úÖ {tabela}: Vazia (correto)")
        else:
            print(f"‚ö†Ô∏è  {tabela}: {count} registros (deveria estar vazia)")

if __name__ == "__main__":
    print("=" * 60)
    print("üßπ LIMPEZA DO BANCO DE DADOS DO SISTEMA")
    print("=" * 60)
    
    # Confirmar limpeza
    resposta = input("‚ö†Ô∏è  Tem certeza que deseja limpar o banco? (sim/n√£o): ").lower()
    
    if resposta in ['sim', 's', 'yes', 'y']:
        sucesso = limpar_banco_dados()
        
        if sucesso:
            print("\nüéØ Banco limpo com sucesso!")
            print("üìã Pr√≥ximos passos:")
            print("   1. Execute o sistema")
            print("   2. Teste as integra√ß√µes de lan√ßamentos")
            print("   3. Verifique se os dados s√£o salvos corretamente")
        else:
            print("\n‚ùå Erro durante a limpeza do banco!")
    else:
        print("‚ùå Limpeza cancelada pelo usu√°rio.")
    
    print("=" * 60)
